# Generated by Django 4.2.7 on 2023-11-15 19:11

import colorfield.fields
import django.core.validators
import django.utils.timezone
import django_countries.fields
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models

import invoices.actions.helpers
import invoices.db.fields
import invoices.employee
import invoices.events
import invoices.holidays
import invoices.middleware
import invoices.models
import invoices.resources
import invoices.validators.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bedsore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identification_date', models.DateField()),
                ('location', models.CharField(help_text='Exemple: Dos, Talon droit, etc.', max_length=255)),
                ('is_linked_to_care', models.BooleanField(default=True, help_text="Si vous sélectionnez cette option, cela signifie que l'escarre est liée à la prise en charge")),
                ('initial_description', models.TextField()),
            ],
            options={
                'verbose_name': 'Escarre',
                'verbose_name_plural': 'Escarres',
                'ordering': ['-identification_date'],
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('licence_plate', models.CharField(max_length=8)),
                ('is_connected_to_convadis', models.BooleanField(default=False)),
                ('invoxia_identifier', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('convadis_identifier', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('registration_card', models.FileField(blank=True, help_text='You can attach the scan of the registration card of the car', null=True, upload_to=invoices.resources.registration_card_storage_location)),
                ('vin_number', models.CharField(blank=True, default=None, max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Voiture, Clé ou coffre',
                'verbose_name_plural': 'Voitures, Clés ou coffres',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='CareCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=30, unique=True)),
                ('name', models.TextField(max_length=320)),
                ('description', models.TextField(max_length=400)),
                ('reimbursed', models.BooleanField(default=True, verbose_name='Prise en charge par CNS')),
                ('contribution_undue', models.BooleanField(default=False, help_text='Si vous sélectionnez cette option la participation de 12% ne sera pas déduite de cette prestation', verbose_name='Participation forfaitaire non dûe')),
                ('is_package', models.BooleanField(default=False, help_text='Si vous sélectionnez cette option, cela signifie que cette prestation est un forfait et que le prix est fixe', verbose_name='Forfait')),
                ('exclusive_care_codes', models.ManyToManyField(blank=True, to='invoices.carecode')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ConvadisOAuth2Token',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(blank=True, choices=[('MAL', 'Male'), ('FEM', 'Female'), ('OTH', 'Other')], default=None, max_length=5, null=True, verbose_name='Sex')),
                ('start_contract', models.DateField(verbose_name='start date')),
                ('end_contract', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('provider_code', models.CharField(blank=True, help_text='Enter the service provider code at the C.N.S', max_length=30, verbose_name='Provider code')),
                ('has_gdrive_access', models.BooleanField(default=False, verbose_name='Allow access to Google Drive files')),
                ('has_gcalendar_access', models.BooleanField(default=False, verbose_name="Allow access to Prestations' calendar")),
                ('google_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Google User ID')),
                ('driving_licence_number', models.CharField(blank=True, help_text='Enter the driver licence number', max_length=20, verbose_name='Driver Licence Number')),
                ('abbreviation', models.CharField(default='XXX', help_text='Enter employee abbreviation, must be unique across company', max_length=3, verbose_name='Abbreviation')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('bank_account_number', models.CharField(blank=True, help_text='Code BIC + IBAN', max_length=50, verbose_name='Numéro de compte IBAN')),
                ('address', models.TextField(blank=True, max_length=100, null=True, verbose_name='Adresse')),
                ('access_card_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Carte Voiture')),
                ('access_card_code', models.CharField(blank=True, max_length=40, null=True, verbose_name='Code Carte Voiture')),
                ('sn_code', models.CharField(blank=True, max_length=40, null=True, verbose_name='Matricule sécurité sociale')),
                ('end_trial_period', models.DateField(blank=True, null=True, verbose_name="Fin période d'essai")),
                ('citizenship', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('color_cell', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None)),
                ('color_text', colorfield.fields.ColorField(default='#FF0000', image_field=None, max_length=25, samples=None)),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth date')),
                ('birth_place', models.CharField(blank=True, help_text='Enter the City / Country of Birth', max_length=50, verbose_name='Birth Place')),
                ('avatar', models.ImageField(blank=True, help_text='You can attach the scan of the declaration', null=True, upload_to=invoices.employee.avatar_storage_location, validators=[invoices.employee.validate_avatar])),
                ('bio', models.TextField(default='Fill in your bio', max_length=200, verbose_name='Bio')),
                ('to_be_published_on_www', models.BooleanField(blank=True, help_text='If checked then bio and avatar fields become mandatory', null=True, verbose_name='Public Profile')),
                ('virtual_career_anniversary_date', models.DateField(blank=True, help_text='Pour les carrières sous convention SAS', null=True, verbose_name='Date anniversaire carrière virtuelle')),
                ('miscellaneous', models.TextField(default='Code Pin tél:...etc', max_length=200, verbose_name='Divers')),
            ],
            options={
                'ordering': ['-end_contract', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.DateField(help_text='Event day', verbose_name='Event day')),
                ('time_start_event', models.TimeField(blank=True, help_text='Event start time', null=True, verbose_name='Event start time')),
                ('time_end_event', models.TimeField(blank=True, help_text='Event end time', null=True, verbose_name='Event end time')),
                ('state', models.PositiveSmallIntegerField(choices=[(1, 'Waiting for validation'), (2, 'Valid'), (3, 'Done'), (4, 'Ignored'), (5, 'Not Done'), (6, 'Cancelled')], verbose_name='State')),
                ('event_type_enum', models.CharField(choices=[('BIRTHDAY', 'Birthday'), ('CARE', 'Soin'), ('ASS_DEP', 'Soin Assurance dépendance'), ('GENERIC', 'Général pour Patient (non soin)'), ('GNRC_EMPL', 'Général pour Employé')], default='CARE', max_length=10, verbose_name='Type')),
                ('notes', models.TextField(blank=True, help_text='Notes', null=True, verbose_name='Notes')),
                ('event_report', models.TextField(blank=True, help_text='A remplir une fois le soin terminé', null=True, verbose_name='Rapport de soin')),
                ('at_office', models.BooleanField(default=False, help_text='Check the box if the event will occur at the office premises', verbose_name='At office premises')),
                ('event_address', models.TextField(blank=True, help_text='Enter the address where the event will occur', null=True, verbose_name='Event address')),
                ('created_by', models.CharField(default='ui', max_length=30)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('calendar_url', models.URLField(blank=True, default='http://a.sur.lu', null=True)),
                ('calendar_id', models.CharField(blank=True, default='0', max_length=100, null=True)),
                ('employees', models.ForeignKey(blank=True, help_text='Please select an employee', limit_choices_to=invoices.events.limit_to_active_employees, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_link_to_employee', to='invoices.employee')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Event',
                'ordering': ['-time_start_event'],
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Descriptive Name')),
                ('to_be_generated', models.BooleanField(default=False, help_text='If checked, these type of events types will be generated auto.', verbose_name='To be generated')),
            ],
            options={
                'verbose_name': 'Event -> Type',
                'verbose_name_plural': 'Event -> Types',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(default=invoices.models.get_default_invoice_number, max_length=50, unique=True)),
                ('is_private', models.BooleanField(default=False, help_text='Seuls les patients qui ne disposent pas de la prise en charge CNS seront recherchés dans le champ Patient (privé)', verbose_name='Facture pour patient non pris en charge par CNS')),
                ('accident_id', models.CharField(blank=True, help_text="Numéro d'accident est facultatif", max_length=30, null=True)),
                ('accident_date', models.DateField(blank=True, help_text="Date d'accident est facultatif", null=True)),
                ('invoice_date', models.DateField(verbose_name='Invoice date')),
                ('patient_invoice_date', models.DateField(blank=True, null=True, verbose_name='Date envoi au patient')),
                ('invoice_send_date', models.DateField(blank=True, null=True, verbose_name='Date envoi facture')),
                ('invoice_sent', models.BooleanField(default=False)),
                ('invoice_paid', models.BooleanField(default=False)),
                ('is_valid', models.BooleanField(default=True)),
                ('validation_comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': "Mémoire d'honoraire",
                'verbose_name_plural': "Mémoires d'honoraire",
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItemBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Invoice batch start date')),
                ('end_date', models.DateField(verbose_name='Invoice batch end date')),
                ('send_date', models.DateField(blank=True, null=True)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('batch_description', models.CharField(blank=True, max_length=50, null=True, verbose_name='description')),
                ('force_update', models.BooleanField(default=False)),
                ('version', models.IntegerField(default=0)),
                ('medical_prescriptions', models.FileField(blank=True, null=True, upload_to=invoices.actions.helpers.invoice_itembatch_ordo_filename, verbose_name='Ordonnances')),
                ('prefac_file', models.FileField(blank=True, null=True, upload_to=invoices.actions.helpers.invoice_itembatch_prefac_filename, verbose_name='Fichier Plat facturation')),
                ('generated_invoice_files', models.FileField(blank=True, null=True, upload_to=invoices.actions.helpers.invoice_itembatch_medical_prescription_filename, verbose_name='Facture CNS PDF')),
                ('batch_type', models.CharField(choices=[('CNS_INF', 'CNS Infirimier'), ('CNS_INF_PACK', 'Forfait Infirimier'), ('CNS_PAL', 'CNS Paliatif'), ('AD', 'Assurance Dépendance'), ('OTHER', 'Autre')], default='CNS_INF', max_length=50)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='InvoicingDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_code', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=30)),
                ('address', models.TextField(max_length=50)),
                ('zipcode_city', models.CharField(max_length=20)),
                ('country', django_countries.fields.CountryField(blank=True, default='LU', max_length=2, null=True)),
                ('phone_number', models.CharField(max_length=30)),
                ('email_address', models.EmailField(blank=True, default=None, max_length=254, null=True, validators=[django.core.validators.EmailValidator])),
                ('bank_account', models.CharField(max_length=50)),
                ('rc', models.CharField(blank=True, max_length=50, null=True, verbose_name='Registre de commerce')),
                ('af', models.CharField(blank=True, max_length=50, null=True, verbose_name='Autorisation ministère de la famille activités soins à domicile')),
                ('aa', models.CharField(blank=True, max_length=50, null=True, verbose_name='Autorisation ministère de la famille activités aides à domicile')),
                ('default_invoicing', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Détail de facturation',
                'verbose_name_plural': 'Détail de facturation',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='JobPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, max_length=100, null=True)),
                ('is_involved_in_health_care', models.BooleanField(default=True, verbose_name='Impliqué dans les soins')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_sn', models.CharField(max_length=30, validators=[invoices.validators.validators.MyRegexValidator(code='invalid_code_sn', message='Premier chiffre (1 à 2) suivi de 12 chiffres (0 à 9)', regex='^[12]\\d{12}')])),
                ('first_name', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=30)),
                ('gender', models.CharField(blank=True, choices=[('MAL', 'Male'), ('FEM', 'Female'), ('OTH', 'Other')], default=None, max_length=5, null=True, verbose_name='Sex')),
                ('address', models.TextField(max_length=255)),
                ('zipcode', models.CharField(max_length=10)),
                ('city', models.CharField(max_length=30)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('phone_number', models.CharField(max_length=30)),
                ('additional_phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Numéro de tél. additionel')),
                ('email_address', models.EmailField(blank=True, default=None, max_length=254, null=True)),
                ('participation_statutaire', models.BooleanField(default=False)),
                ('is_private', models.BooleanField(default=False)),
                ('is_under_dependence_insurance', models.BooleanField(default=False, verbose_name='Assurance dépendance')),
                ('date_of_exit', models.DateField(blank=True, default=None, null=True, verbose_name='Date de sortie')),
                ('is_eligible_to_parameter_surveillance', models.BooleanField(default=False, verbose_name='Suivre Paramètres')),
                ('date_of_death', models.DateField(blank=True, default=None, null=True, verbose_name='Date de décès')),
                ('additional_details', models.TextField(blank=True, default=None, help_text='Vous pouvez mettre par exemple les numéros de carte adapto ou tout autre info utile.', max_length=500, null=True, verbose_name='Détails additionels')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PaymentReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('paid_at', models.DateField(blank=True, default=None, null=True)),
                ('invoice_list', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Physician',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_code', models.CharField(max_length=30)),
                ('first_name', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=30)),
                ('physician_speciality', models.CharField(blank=True, default=None, max_length=30, null=True)),
                ('address', models.TextField(max_length=30)),
                ('zipcode', models.CharField(max_length=10)),
                ('city', models.CharField(max_length=30)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('phone_number', models.CharField(max_length=30)),
                ('fax_number', models.CharField(blank=True, max_length=30, null=True)),
                ('email_address', models.EmailField(blank=True, default=None, max_length=254, null=True)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PublicHolidayCalendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calendar_year', models.PositiveIntegerField(default=2023)),
            ],
        ),
        migrations.CreateModel(
            name='SimplifiedTimesheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timesheet_validated', models.BooleanField(default=False, verbose_name='Valide')),
                ('time_sheet_year', models.PositiveIntegerField(default=2023)),
                ('extra_hours_paid_current_month', models.DecimalField(decimal_places=2, default=0, max_digits=4, verbose_name='Heures supp. payées ou récupérées pour le mois courant')),
                ('extra_hours_balance', models.DecimalField(decimal_places=2, default=0, help_text="Ce champ est calculé mais vous pouvez quand même écraser la valeur si vous êtes admin.\nIl reporte le total des heures suppl. (ou déficit) du mois M - 1.\nIl est (re)calculé à chaque fois que l'on valide un Temps de Travail et la formule : Hours should work TS(M-1) + Balance des heures supp. non soldées - Heures supp. payées ou récupérées pour le mois courant", max_digits=5, verbose_name='Balance des heures supp. non soldées')),
                ('time_sheet_month', models.PositiveSmallIntegerField(choices=[(1, 'Janvier'), (2, 'Février'), (3, 'Mars'), (4, 'Avril'), (5, 'Mai'), (6, 'Juin'), (7, 'Juillet'), (8, 'Août'), (9, 'Septembre'), (10, 'Octobre'), (11, 'Novembre'), (12, 'Décembre')], default=11)),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('employee', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='invoices.employee')),
                ('user', invoices.db.fields.CurrentUserField(default=invoices.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Temps de travail',
                'verbose_name_plural': 'Temps de travail',
            },
        ),
        migrations.CreateModel(
            name='Timesheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Date debut')),
                ('end_date', models.DateField(verbose_name='Date fin')),
                ('submitted_date', models.DateTimeField(blank=True, null=True, verbose_name="Date d'envoi")),
                ('other_details', models.TextField(blank=True, max_length=100, null=True, verbose_name='Autres détails')),
                ('timesheet_validated', models.BooleanField(default=False, verbose_name='Valide')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.employee')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='TimesheetTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ValidityDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='date debut validite')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='date fin validite')),
                ('gross_amount', models.DecimalField(decimal_places=6, max_digits=10, verbose_name='montant brut')),
                ('care_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='validity_dates', to='invoices.carecode')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='TimesheetDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(verbose_name='Date')),
                ('end_date', models.TimeField(verbose_name='Heure fin')),
                ('other', models.CharField(blank=True, max_length=50, null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.patient')),
                ('task_description', models.ManyToManyField(help_text='Entrez une ou plusieurs taches.', to='invoices.timesheettask', verbose_name='Description(s) tache')),
                ('timesheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.timesheet')),
            ],
        ),
        migrations.CreateModel(
            name='SimplifiedTimesheetDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(verbose_name='Date')),
                ('end_date', models.TimeField(verbose_name='Heure fin')),
                ('simplified_timesheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.simplifiedtimesheet')),
            ],
            options={
                'verbose_name': 'Détail temps de travail',
                'verbose_name_plural': 'Détails temps de travail',
            },
        ),
        migrations.CreateModel(
            name='ReportPicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(default='', help_text='Please, give a description of the uploaded image.', max_length=250, verbose_name='Description')),
                ('image', models.ImageField(upload_to=invoices.events.update_report_picture_filename, validators=[invoices.events.validate_image])),
                ('event', models.ForeignKey(help_text='Here, you can upload pictures if needed', on_delete=django.db.models.deletion.CASCADE, related_name='report_pictures', to='invoices.event')),
            ],
            options={
                'verbose_name': 'Image attachée au rapport',
                'verbose_name_plural': 'Images attachées au rapport',
            },
        ),
        migrations.CreateModel(
            name='PublicHolidayCalendarDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calendar_date', models.DateField(help_text='Saisir la date calendrier du jour férié', verbose_name='Date calendrier')),
                ('calendar_link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.publicholidaycalendar')),
            ],
        ),
        migrations.CreateModel(
            name='Prestation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('date', models.DateTimeField(verbose_name='date')),
                ('at_home', models.BooleanField(default=False)),
                ('at_home_paired', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='paired_at_home', to='invoices.prestation')),
                ('carecode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prestations', to='invoices.carecode')),
                ('employee', models.ForeignKey(blank=True, default='auth.User', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prestations', to='invoices.employee')),
                ('invoice_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prestations', to='invoices.invoiceitem')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='PatientAdminFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_description', models.CharField(max_length=50, verbose_name='description')),
                ('file_date', models.DateField(blank=True, null=True, verbose_name='date du fichier')),
                ('file_upload', models.FileField(blank=True, null=True, upload_to=invoices.models.update_patient_admin_filename)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.patient')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalPrescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date ordonnance')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Date fin des soins')),
                ('notes', models.TextField(blank=True, help_text='Veuillez suivre la nomenclature suivante: Pathologies: ...; Antécédents: ...; Traitements: ...; Allergies: ...; Autres: ...', max_length=1000, null=True, verbose_name='Notes ou remarques')),
                ('file_upload', models.FileField(blank=True, null=True, upload_to=invoices.models.update_medical_prescription_filename)),
                ('thumbnail_img', models.ImageField(blank=True, null=True, upload_to=invoices.models.update_medical_prescription_filename, verbose_name='Aperçu')),
                ('patient', models.ForeignKey(default=None, help_text='Please chose the Patient who is receiving the medical prescription', on_delete=django.db.models.deletion.CASCADE, related_name='medical_prescription_patient', to='invoices.patient')),
                ('prescriptor', models.ForeignKey(help_text='Please chose the Physician who is giving the medical prescription', on_delete=django.db.models.deletion.CASCADE, related_name='medical_prescription', to='invoices.physician')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='MaintenanceFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_date', models.DateField()),
                ('description', models.CharField(max_length=50)),
                ('mileage', models.IntegerField(blank=True, null=True)),
                ('file', models.FileField(upload_to=invoices.resources.maintenance_file_storage_location)),
                ('car_link', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoices.car')),
            ],
            options={
                'ordering': ['-file_date'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItemPrescriptionsList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='invoices.invoiceitem')),
                ('medical_prescription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='med_prescription_multi_invoice_items', to='invoices.medicalprescription', verbose_name='Ordonnance')),
            ],
            options={
                'verbose_name': 'Liste des ordonnances',
                'verbose_name_plural': 'Liste des ordonnances',
            },
        ),
        migrations.CreateModel(
            name='InvoiceItemEmailLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=200)),
                ('body', models.TextField()),
                ('cc', models.CharField(blank=True, max_length=200)),
                ('bcc', models.CharField(blank=True, max_length=200)),
                ('attachments', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(blank=True, max_length=200)),
                ('error', models.TextField(blank=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to='invoices.invoiceitem')),
            ],
        ),
        migrations.AddField(
            model_name='invoiceitem',
            name='batch',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoice_items', to='invoices.invoiceitembatch'),
        ),
        migrations.AddField(
            model_name='invoiceitem',
            name='invoice_details',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoicing_details_link', to='invoices.invoicingdetails'),
        ),
        migrations.AddField(
            model_name='invoiceitem',
            name='medical_prescription',
            field=models.ForeignKey(blank=True, help_text='Please choose a Medical Prescription', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoice_items', to='invoices.medicalprescription'),
        ),
        migrations.AddField(
            model_name='invoiceitem',
            name='patient',
            field=models.ForeignKey(help_text='choisir parmi les patients en entrant quelques lettres de son nom ou prénom', on_delete=django.db.models.deletion.CASCADE, related_name='invoice_items', to='invoices.patient'),
        ),
        migrations.CreateModel(
            name='Hospitalization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name="Début d'hospitlisation")),
                ('end_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date de fin')),
                ('description', models.TextField(blank=True, default=None, max_length=50, null=True)),
                ('patient', models.ForeignKey(help_text='Please enter hospitalization dates of the patient', on_delete=django.db.models.deletion.CASCADE, related_name='hospitalizations', to='invoices.patient')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='HolidayRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('validator_notes', models.TextField(blank=True, help_text='Notes', null=True, verbose_name='Notes Validateur')),
                ('request_status', models.CharField(choices=[('PNDG', 'Pending'), ('REF', 'Refused'), ('OK', 'Accepted')], default='PNDG', max_length=4)),
                ('force_creation', models.BooleanField(default=False, help_text='Si vous êtes manager vous pouvez forcer la création de congés même si conflits avec d#autre employés')),
                ('do_not_notify', models.BooleanField(blank=True, default=False, help_text='Do not send email notifications', null=True, verbose_name='Do not notify')),
                ('start_date', models.DateField(verbose_name='Date début')),
                ('end_date', models.DateField(verbose_name='Date fin')),
                ('requested_period', models.CharField(choices=[('MRNG', 'Matin'), ('EVNG', 'Soir'), ('FULL', 'Journée entière')], default='FULL', max_length=4, verbose_name='Période')),
                ('reason', models.PositiveSmallIntegerField(choices=[(1, 'Congés'), (2, 'Maladie'), (3, 'Formation'), (4, 'Desiderata'), (5, 'Exceptionnel')])),
                ('employee', invoices.db.fields.CurrentUserField(default=invoices.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('request_creator', invoices.db.fields.CurrentUserField(default=invoices.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='holiday_request_creator', to=settings.AUTH_USER_MODEL)),
                ('validated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='validator', to='invoices.employee')),
            ],
            options={
                'verbose_name': "Demande d'absence",
                'verbose_name_plural': "Demandes d'absence",
            },
        ),
        migrations.CreateModel(
            name='ExpenseCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('number', models.CharField(default='XX1111', max_length=20)),
                ('pin', models.CharField(default='1111', max_length=8)),
                ('car_link', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='invoices.car')),
            ],
            options={
                'ordering': ['-name'],
            },
        ),
        migrations.AddField(
            model_name='event',
            name='event_type',
            field=models.ForeignKey(blank=True, help_text='Event type', null=True, on_delete=django.db.models.deletion.CASCADE, to='invoices.eventtype', verbose_name='Event type'),
        ),
        migrations.AddField(
            model_name='event',
            name='patient',
            field=models.ForeignKey(blank=True, help_text='Please select a patient', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_link_to_patient', to='invoices.patient'),
        ),
        migrations.CreateModel(
            name='EmployeeContractDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Date début période')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Date fin période')),
                ('number_of_hours', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(40)], verbose_name="Nombre d'heures par semaine")),
                ('contract_type', models.CharField(blank=True, choices=[('CDD', 'CDD'), ('CDI', 'CDI'), ('STG', 'Stage')], default='CDI', max_length=10, null=True, verbose_name='Type contrat')),
                ('monthly_wage', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Salaire Mensuel')),
                ('index', models.PositiveIntegerField(blank=True, null=True, verbose_name='Index')),
                ('responsibility_bonus', models.PositiveIntegerField(blank=True, null=True, verbose_name='Index')),
                ('number_of_days_holidays', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(37)], verbose_name='Nombre de jours de congés')),
                ('employee_contract_file', models.FileField(blank=True, help_text='You can attach the scan of the contract', null=True, upload_to=invoices.employee.contract_storage_location)),
                ('contract_signed_date', models.DateField(blank=True, null=True, verbose_name='Date signature contrat')),
                ('contract_date', models.DateField(blank=True, null=True, verbose_name='Date contrat')),
                ('employee_trial_period_text', models.TextField(blank=True, max_length=800, null=True, verbose_name="Texte période d'essai")),
                ('employee_special_conditions_text', models.TextField(blank=True, max_length=200, null=True, verbose_name='Texte conditions spéciales')),
                ('career_rank', models.CharField(blank=True, help_text='Sous format Grade / Ancienneté Carrière', max_length=10, null=True, verbose_name='Grade')),
                ('anniversary_career_rank', models.DateField(blank=True, null=True, verbose_name='Date anniversaire grade')),
                ('weekly_work_organization', models.TextField(blank=True, help_text='Veuillez saisir ce champ sous format: 8h/j 5 jours par semaine', max_length=80, null=True, verbose_name='Organisation du travail hebdomadaire')),
                ('employee_link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.employee')),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeAdminFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_description', models.CharField(max_length=60, verbose_name='description')),
                ('document_expiry_date', models.DateField(blank=True, null=True, verbose_name="Date d'expiration du document")),
                ('file_upload', models.FileField(blank=True, null=True, upload_to=invoices.employee.update_filename)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.employee')),
            ],
        ),
        migrations.AddField(
            model_name='employee',
            name='occupation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.jobposition'),
        ),
        migrations.AddField(
            model_name='employee',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='BedsoreRiskAssessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date', models.DateField()),
                ('sensory_perception', models.IntegerField(choices=[(1, 'Complètement limitée'), (2, 'Très limitée'), (3, 'Légèrement limitée'), (4, 'Pas de limitation')])),
                ('moisture', models.IntegerField(choices=[(1, 'Constamment humide'), (2, 'Très humide'), (3, 'Occasionnellement humide'), (4, 'Rarement humide')])),
                ('activity', models.IntegerField(choices=[(1, 'Alité'), (2, 'Fauteuil'), (3, 'Marche occasionnellement'), (4, 'Marche fréquemment')])),
                ('mobility', models.IntegerField(choices=[(1, 'Complètement immobile'), (2, 'Très limitée'), (3, 'Légèrement limitée'), (4, 'Pas de limitation')])),
                ('nutrition', models.IntegerField(choices=[(1, 'Très mauvaise'), (2, 'Probablement inadéquate'), (3, 'Adéquate'), (4, 'Excellente')])),
                ('friction_shear', models.IntegerField(choices=[(1, 'Problème significatif'), (2, 'Problème potentiel'), (3, 'Pas de problème apparent')])),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.patient')),
            ],
            options={
                'verbose_name': 'Évaluation du risque de développer une escarre',
                'verbose_name_plural': 'Évaluations du risque de développer une escarre',
                'ordering': ['-assessment_date'],
            },
        ),
        migrations.CreateModel(
            name='BedsoreEvaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_date', models.DateField()),
                ('stage', models.IntegerField(choices=[(1, 'Stage 1'), (2, 'Stage 2'), (3, 'Stage 3'), (4, 'Stage 4')])),
                ('size', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Taille en cm')),
                ('depth', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Profondeur en cm')),
                ('bedsore_evolution', models.CharField(choices=[('NA', 'Première visite'), ('BETTER', 'Amélioration'), ('STABLE', 'Stable'), ('WORSE', 'Dégradation')], default='NA', max_length=8)),
                ('treatment', models.TextField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(upload_to=invoices.actions.helpers.update_bedsore_pictures_filenames, validators=[invoices.models.validate_image])),
                ('bedsore', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.bedsore')),
            ],
            options={
                'verbose_name': 'Evaluation',
                'verbose_name_plural': 'Evaluations',
                'ordering': ['-evaluation_date'],
            },
        ),
        migrations.AddField(
            model_name='bedsore',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.patient'),
        ),
        migrations.CreateModel(
            name='AssignedAdditionalEmployee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_additional_employee', models.ForeignKey(blank=True, default=None, help_text='Please enter employee', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_employees_to_event', to='invoices.employee', verbose_name='Soignant')),
                ('event_assigned_to', models.ForeignKey(blank=True, default=None, help_text='Please enter xxx', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_assigned', to='invoices.event')),
            ],
            options={
                'verbose_name': 'Invité Traitant',
                'verbose_name_plural': 'Invités Traitant',
            },
        ),
        migrations.CreateModel(
            name='AlternateAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_address', models.TextField(help_text='ex: 1 rue de la bonne santé, L-1214 Luxembourg', max_length=255, verbose_name='Adresse complète')),
                ('start_date', models.DateField()),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='invoices.patient')),
            ],
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_alert', models.CharField(max_length=255, verbose_name='Text alert')),
                ('alert_level', models.CharField(choices=[('INFO', 'Info'), ('WARNING', 'Warning'), ('DANGER', 'Danger')], max_length=20, verbose_name='Alert level')),
                ('date_alert', models.DateTimeField(auto_now_add=True, verbose_name='Date Alert')),
                ('is_read', models.BooleanField(default=False, verbose_name='Is Read')),
                ('date_read', models.DateTimeField(blank=True, null=True, verbose_name='Date Read')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('link_to_object', models.URLField(blank=True, max_length=255, null=True)),
                ('link_to_object_name', models.CharField(blank=True, max_length=255, null=True)),
                ('link_to_object_id', models.IntegerField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, max_length=255, null=True, verbose_name='Comment')),
                ('alert_created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alert_created_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Alert',
                'verbose_name_plural': 'Alerts',
                'ordering': ['-date_alert'],
            },
        ),
        migrations.CreateModel(
            name='AbsenceRequestFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_description', models.CharField(max_length=30, verbose_name='description')),
                ('file_upload', models.FileField(blank=True, null=True, upload_to=invoices.holidays.update_absence_request_filename)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.holidayrequest')),
            ],
        ),
        migrations.CreateModel(
            name='EventList',
            fields=[
            ],
            options={
                'verbose_name': 'Mes tâches',
                'verbose_name_plural': 'Planning tâches à valider',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('invoices.event',),
        ),
        migrations.CreateModel(
            name='EventWeekList',
            fields=[
            ],
            options={
                'verbose_name': "Nouveau Plannig (Ne modifiez pas les événements à partir d'ici)",
                'verbose_name_plural': "Nouveaux Plannigs (Ne modifiez pas les événements à partir d'ici)",
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('invoices.event',),
        ),
        migrations.AddConstraint(
            model_name='simplifiedtimesheet',
            constraint=models.UniqueConstraint(fields=('employee', 'time_sheet_year', 'time_sheet_month'), name='unique time sheet'),
        ),
        migrations.AddConstraint(
            model_name='holidayrequest',
            constraint=models.UniqueConstraint(fields=('employee', 'start_date', 'end_date'), name='unique holiday request'),
        ),
    ]
