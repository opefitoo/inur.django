# Generated by Django 4.2.7 on 2023-11-15 18:54

import datetime
import dependence.activity
import dependence.cnscommunications
import dependence.falldeclaration
import dependence.invoicing
import dependence.medicalcaresummary
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import invoices.db.fields
import invoices.middleware


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('invoices', '0002_initial_2023'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CareOccurrence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('str_name', models.CharField(max_length=50, verbose_name='Nom')),
                ('value', models.CharField(default='?', max_length=5, verbose_name='Valeur')),
            ],
            options={
                'verbose_name': 'Occurence des soins',
                'verbose_name_plural': 'Occurences',
                'ordering': ['value'],
            },
        ),
        migrations.CreateModel(
            name='ChangeDeclarationFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_date_of_sending', models.DateField(verbose_name='Provider date of sending')),
                ('internal_reference', models.CharField(max_length=10, verbose_name='Internal reference')),
                ('force_xml_generation', models.BooleanField(default=False, help_text="Force the generation of the XML file, don't forget to check the checkbox before saving the form", verbose_name='Force XML generation')),
                ('force_xml_return_check', models.BooleanField(default=False, help_text="Force the analysis of the XML Retour file, don't forget to check the checkbox before saving the form", verbose_name='Force XML Retour Check')),
                ('generated_xml', models.FileField(blank=True, null=True, upload_to=dependence.cnscommunications.long_term_care_declaration_file_path, verbose_name='Generated XML')),
                ('manually_generated_xml', models.FileField(blank=True, null=True, upload_to=dependence.cnscommunications.long_term_care_declaration_file_path, verbose_name='Manually generated XML')),
                ('generated_xml_version', models.IntegerField(default=0, verbose_name='Generated XML version')),
                ('generated_return_xml', models.FileField(blank=True, null=True, upload_to=dependence.cnscommunications.long_term_care_declaration_file_path_for_return, verbose_name='Retour CNS return XML')),
                ('sent_to_ftp_server', models.DateTimeField(blank=True, null=True, verbose_name='Sent to FTP server')),
                ('send_status_to_ftp_server', models.CharField(blank=True, max_length=50, null=True, verbose_name='Send status to FTP server')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('updates_log', models.TextField(blank=True, null=True, verbose_name='Updates log')),
            ],
            options={
                'verbose_name': 'Fichier de déclaration de changement',
                'verbose_name_plural': 'Fichiers de déclaration de changement',
                'ordering': ['provider_date_of_sending'],
            },
        ),
        migrations.CreateModel(
            name='FallDeclaration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetimeOfFall', models.DateTimeField(verbose_name='Date, time of fall')),
                ('placeOfFall', models.CharField(max_length=200, verbose_name='Place of fall')),
                ('file_upload', models.FileField(blank=True, help_text='You can attach the scan of the declaration', null=True, upload_to=dependence.falldeclaration.update_fall_declaration_filename, validators=[dependence.falldeclaration.validate_file], verbose_name='Attached file')),
                ('witnesses', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Possible witnesses')),
                ('fall_circumstance', models.CharField(choices=[('FCI_ON_SAME_LEVEL', 'Fall on the same level as a result of slipping, stumbling and tripping'), ('FCI_FROM_BED', 'Fall from a bed'), ('FCI_FROM_CHAIR', 'Fall from a chair'), ('FCI_FROM_STAIRS', 'Fall down stairs and steps'), ('FCI_WHILE_HELD', 'Fall while being carried or supported by a third party'), ('FCI_FROM_WHEELC', 'Fall from a wheelchair'), ('FCI_FROM_TOILET', 'Fall from a toilet seat'), ('FCI_OTHER_CAUSES', 'Other')], max_length=255, verbose_name='Circumstances of the fall')),
                ('other_fall_circumstance', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Other circumstances of the fall')),
                ('incident_circumstance', models.TextField(blank=True, default=None, max_length=255, null=True, verbose_name='Circumstances of the incident')),
                ('fall_consequences', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Consequences of the fall')),
                ('other_fall_consequence', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Other consequence of the fall')),
                ('fall_required_medical_acts', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Medical and/or nursing acts required within 24 hoursonsequences of the fall')),
                ('other_required_medical_act', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Other medical and/or nursing acts required within 24 hours')),
                ('medications_risk_factor', models.CharField(blank=True, choices=[('FMRF_MEDS', 'Medicines (psychotropics, anti-hypertensives, polypragmasia etc.)'), ('FMRF_OTHER', 'Others: > 4 drugs')], default=None, max_length=255, null=True, verbose_name='Risk factors')),
                ('fall_cognitive_mood_diorders', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Cognitive and/or mood disorders')),
                ('fall_incontinences', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Incontinence')),
                ('mobility_disability', models.CharField(choices=[('FCMD_NONE', 'Moves alone, without difficulty, without auxiliary means'), ('FMD_DIFFICULTY', 'Moves independently with difficulty with or without aids'), ('FMD_ACCOMPANIED', 'Moves accompanied without auxiliary means'), ('FMD_AUXILIARY', 'Moves accompanied with auxiliary means')], max_length=255, verbose_name='Mobility Disability')),
                ('unsuitable_footwear', models.BooleanField(default=False, verbose_name='Unsuitable footwear')),
                ('other_contributing_factor', models.TextField(blank=True, default=None, max_length=255, null=True, verbose_name='Other contributing factor')),
                ('preventable_fall', models.BooleanField(verbose_name='The fall could have been prevented')),
                ('physician_informed', models.BooleanField(verbose_name='The doctor was notified')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Last update')),
                ('declared_by', models.ForeignKey(blank=True, default=None, limit_choices_to=models.Q(('abbreviation__in', ['XXX']), _negated=True), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='edeclaring_employee', to='invoices.employee', verbose_name='Declared by')),
                ('patient', models.ForeignKey(help_text='Only looks for patients covered by long-term care insurance, check that the checkbox is validated if you cannot find your patient', limit_choices_to={'is_under_dependence_insurance': True}, on_delete=django.db.models.deletion.CASCADE, related_name='falldeclaration_to_patient', to='invoices.patient')),
                ('user', invoices.db.fields.CurrentUserField(default=invoices.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'verbose_name': 'Fall Declaration',
                'verbose_name_plural': 'Fall Declarations',
                'ordering': ['patient__id'],
            },
        ),
        migrations.CreateModel(
            name='LongTermCareInvoiceFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_start_period', models.DateField(verbose_name='Invoice Start Period')),
                ('invoice_end_period', models.DateField(verbose_name='Invoice End Period')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
            ],
            options={
                'verbose_name': 'Facture assurance dépendance',
                'verbose_name_plural': 'Factures assurance dépendance',
            },
        ),
        migrations.CreateModel(
            name='LongTermCareItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('short_description', models.CharField(blank=True, max_length=60, null=True)),
                ('weekly_package', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
            ],
            options={
                'verbose_name': 'Relevé type des aides et soins',
                'verbose_name_plural': 'Relevés type des aides et soins',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='LongTermCareMonthlyStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(verbose_name='Year')),
                ('month', models.PositiveIntegerField(verbose_name='Month')),
                ('generated_invoice_file', models.FileField(blank=True, null=True, upload_to=dependence.invoicing.long_term_care_monthly_statement_file_path, verbose_name='Generated Invoice File')),
                ('force_regeneration', models.BooleanField(default=False, verbose_name='Force Regeneration')),
                ('date_of_submission', models.DateField(blank=True, null=True, verbose_name="Date d'envoi du fichier")),
                ('generated_invoice_file_response', models.FileField(blank=True, null=True, upload_to=dependence.invoicing.long_term_care_monthly_statement_response_file_path, verbose_name='Generated Invoice Response File')),
                ('date_of_receipt', models.DateField(blank=True, null=True, verbose_name='Date de réception du fichier')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
            ],
            options={
                'verbose_name': 'Décompte mensuel de factures',
                'verbose_name_plural': 'Décomptes mensuels de factures',
            },
        ),
        migrations.CreateModel(
            name='LongTermMonthlyActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(verbose_name='Year')),
                ('month', models.PositiveIntegerField(verbose_name='Month')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='longtermmonthlyactivity_patient', to='invoices.patient')),
            ],
            options={
                'verbose_name': "Relevé d'activité mensuel",
                'verbose_name_plural': "Relevés d'activité mensuels",
            },
        ),
        migrations.CreateModel(
            name='LongTermPackage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(max_length=50)),
                ('package', models.BooleanField(default=False, verbose_name='Forfait')),
                ('dependence_level', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(780)])),
                ('weekly_package', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Acte assurance dépendance',
                'verbose_name_plural': 'Acte assurance dépendance',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='MedicalCareSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('parsing_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de parsing')),
                ('force_update', models.BooleanField(default=False, verbose_name='Forcer la mise à jour')),
                ('generated_return_xml', models.FileField(blank=True, null=True, upload_to=dependence.medicalcaresummary.file_path_for_spc, verbose_name='Fichier CNS SPC')),
                ('count_of_supported_persons', models.IntegerField(blank=True, null=True, verbose_name='Nombre de personnes prises en charge')),
                ('date_of_submission', models.DateField(blank=True, null=True, verbose_name="Date d'envoi du fichier")),
            ],
            options={
                'verbose_name': 'Synthèse de prise en charge de la CNS',
                'verbose_name_plural': 'Synthèses de prise en charge de la CNS',
            },
        ),
        migrations.CreateModel(
            name='MedicalCareSummaryPerPatient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('date_of_request', models.DateField(verbose_name='Date de demande')),
                ('referent', models.CharField(max_length=50, verbose_name='Référent')),
                ('date_of_evaluation', models.DateField(verbose_name="Date d'évaluation")),
                ('date_of_notification', models.DateField(verbose_name='Date de notification')),
                ('date_of_notification_to_provider', models.DateField(verbose_name="Date d'envoi au prestataire")),
                ('plan_number', models.CharField(max_length=25, verbose_name='Numéro de plan')),
                ('decision_number', models.CharField(max_length=25, verbose_name='Numéro de décision')),
                ('level_of_needs', models.IntegerField(verbose_name='Niveau de besoins')),
                ('start_of_support', models.DateField(verbose_name='Début de prise en charge')),
                ('end_of_support', models.DateField(blank=True, null=True, verbose_name='Fin de prise en charge')),
                ('date_of_decision', models.DateField(verbose_name='Date de décision')),
                ('special_package', models.CharField(blank=True, max_length=10, null=True, verbose_name='Forfait spécial')),
                ('nature_package', models.IntegerField(blank=True, null=True, verbose_name='Forfait Prestation en nature')),
                ('cash_package', models.IntegerField(blank=True, null=True, verbose_name='Forfait Prestation en espèces')),
                ('fmi_right', models.BooleanField(default=False, verbose_name='Droit FMI')),
                ('sn_code_aidant', models.CharField(blank=True, max_length=13, null=True, verbose_name='SN Code Aidant')),
                ('date_of_change_to_new_plan', models.DateField(blank=True, help_text="Date fin d'application du plan", null=True, verbose_name='Date de changement vers un nouveau plan')),
                ('date_of_start_of_plan_for_us', models.DateField(blank=True, null=True, verbose_name='Date début application du plan')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_care_summary_per_patient', to='invoices.patient')),
            ],
            options={
                'verbose_name': 'Synthèse de prise en charge par patient',
                'verbose_name_plural': 'Synthèses de prise en charge par patient',
                'unique_together': {('patient', 'plan_number', 'decision_number', 'date_of_decision')},
            },
        ),
        migrations.CreateModel(
            name='MonthlyParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('params_year', models.PositiveIntegerField(default=2023)),
                ('params_month', models.IntegerField(choices=[(1, 'Janvier'), (2, 'Février'), (3, 'Mars'), (4, 'Avril'), (5, 'Mai'), (6, 'Juin'), (7, 'Juillet'), (8, 'Août'), (9, 'Septembre'), (10, 'Octobre'), (11, 'Novembre'), (12, 'Décembre')], default=11)),
                ('weight', models.DecimalField(decimal_places=1, max_digits=4, verbose_name='Poids (KG)')),
                ('patient', models.ForeignKey(limit_choices_to=models.Q(('is_under_dependence_insurance', True), ('is_eligible_to_parameter_surveillance', True), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, related_name='health_params_to_patient', to='invoices.patient')),
            ],
            options={
                'verbose_name': 'Surveillance Paramètres',
                'verbose_name_plural': 'Surveillances Param.',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PatientAnamnesis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('nationality', django_countries.fields.CountryField(blank=True, max_length=2, null=True, verbose_name='Nationalité')),
                ('birth_place', models.CharField(blank=True, default=None, help_text='Ville/Pays', max_length=50, null=True, verbose_name='Lieu de naissance')),
                ('contract_file', models.FileField(blank=True, default=None, null=True, upload_to='contracts/', verbose_name='Contrat')),
                ('contract_signed_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date de signature du contrat')),
                ('contract_start_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date de début du contrat')),
                ('contract_end_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date de fin du contrat')),
                ('spoken_languages', models.CharField(blank=True, default=None, max_length=40, null=True, verbose_name='Langues parlées')),
                ('external_doc_link', models.URLField(blank=True, default=None, null=True, verbose_name='URL doc. externe')),
                ('civil_status', models.CharField(blank=True, choices=[('SINGLE', 'Single'), ('MARRIED', 'Married'), ('WIDOW', 'Widow'), ('PACS', 'Pacs'), ('DIV', 'Divorced'), ('SEP', 'Separated'), ('OTH', 'Other')], default=None, max_length=7, null=True, verbose_name='État civil')),
                ('plan_of_share', models.CharField(blank=True, max_length=45, null=True, verbose_name='Plan de partage')),
                ('help_for_cleaning', models.CharField(blank=True, choices=[('FML', 'Family'), ('NTWRK', 'Network'), ('TRD', 'Third party')], default=None, max_length=10, null=True, verbose_name='Aide pour le ménage')),
                ('reason_for_dependence', models.CharField(blank=True, max_length=45, null=True, verbose_name='Motif de prise en charge')),
                ('anticipated_directives', models.CharField(blank=True, max_length=45, null=True, verbose_name='Directives anticipées')),
                ('anticipated_directives_doc_link', models.FileField(blank=True, default=None, null=True, upload_to='documents/anticipated_directives', verbose_name='Doc. directives anticipées')),
                ('religious_beliefs', models.CharField(blank=True, max_length=45, null=True, verbose_name='Religion')),
                ('preferred_drinks', models.TextField(blank=True, default=None, max_length=250, null=True, verbose_name='Boissons préfèrées')),
                ('bio_highlights', models.TextField(blank=True, default=None, help_text='Quelles sont les éléments marquants de votre vie, qui sont importants pour bien vous soigner ?', max_length=200, null=True, verbose_name='Important')),
                ('house_type', models.CharField(blank=True, choices=[('FLAT', 'Flat'), ('HOUSE', 'House')], default=None, max_length=5, null=True, verbose_name="Type d'habitation")),
                ('floor_number', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Étage')),
                ('elevator', models.BooleanField(blank=True, default=None, null=True, verbose_name='Ascenseur')),
                ('ppl_circle', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Entourage')),
                ('door_key', models.BooleanField(blank=True, default=None, null=True, verbose_name='Clé')),
                ('entry_door', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name="Porte d'entrée")),
                ('domestic_animals', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Animaux domestiques')),
                ('preferred_hospital', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Établissement hospitalier choisi')),
                ('health_care_dossier_location', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Dossier de soins se trouve')),
                ('informal_caregiver', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Aidant informel')),
                ('pathologies', models.TextField(blank=True, default=None, max_length=500, null=True, verbose_name='Pathologies')),
                ('technical_help', models.TextField(blank=True, default=None, max_length=500, null=True, verbose_name='Aides techniques')),
                ('medical_background', models.TextField(blank=True, default=None, max_length=500, null=True, verbose_name='Antécédents')),
                ('treatments', models.TextField(blank=True, default=None, max_length=1000, null=True, verbose_name='Traitements')),
                ('allergies', models.TextField(blank=True, default=None, max_length=250, null=True, verbose_name='Allergies')),
                ('electrical_bed', models.BooleanField(blank=True, default=None, null=True, verbose_name='Lit électrique')),
                ('walking_frame', models.BooleanField(blank=True, default=None, null=True, verbose_name='Cadre de marche')),
                ('cane', models.BooleanField(blank=True, default=None, null=True, verbose_name='Canne')),
                ('aqualift', models.BooleanField(blank=True, default=None, null=True, verbose_name='Aqualift')),
                ('remote_alarm', models.CharField(blank=True, choices=[('RK', 'Roude Knap'), ('SDHM', 'Secher Doheem'), ('HLP', 'Help'), ('OTH', 'Other')], default=None, max_length=4, null=True, verbose_name='Alarme')),
                ('other_technical_help', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Autres aides techniques')),
                ('dental_prosthesis', models.CharField(blank=True, choices=[('HI', 'High'), ('LO', 'Low'), ('CMPLT', 'Complete')], default=None, max_length=5, null=True, verbose_name='Prothèses dentaires')),
                ('hearing_aid', models.CharField(blank=True, choices=[('RIT', 'Right'), ('LFT', 'Left'), ('BTH', 'Both')], default=None, max_length=4, null=True, verbose_name='Appareil auditif')),
                ('glasses', models.BooleanField(blank=True, default=None, null=True, verbose_name='Lunettes')),
                ('other_prosthesis', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Autres')),
                ('drugs_managed_by', models.CharField(blank=True, choices=[('AUTNM', 'Autonomous'), ('FML', 'Family'), ('NTWRK', 'Network')], default=None, max_length=5, null=True, verbose_name='Prise en charge')),
                ('drugs_prepared_by', models.CharField(blank=True, default=None, max_length=30, null=True, verbose_name='Prépraration')),
                ('drugs_distribution', models.CharField(blank=True, default=None, max_length=30, null=True, verbose_name='Distribution')),
                ('drugs_ordering', models.CharField(blank=True, default=None, max_length=30, null=True, verbose_name='Commande des médicaments')),
                ('pharmacy_visits', models.CharField(blank=True, default=None, max_length=30, null=True, verbose_name='Passages en pharmacie')),
                ('preferred_pharmacies', models.TextField(blank=True, default=None, max_length=500, null=True, verbose_name='Pharmacie(s)')),
                ('mobilization', models.CharField(blank=True, choices=[('AUTNM', 'Autonomous'), ('TCNQ', 'With technical help'), ('TRD', 'With third party'), ('BD', 'Bedridden'), ('TCNQ_TRD', 'Both Technical help and third party')], default=None, max_length=15, null=True, verbose_name='Mobilisation')),
                ('mobilization_description', models.TextField(blank=True, default=None, max_length=250, null=True, verbose_name='Description')),
                ('hygiene_care_location', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Les soins se déroulent où?')),
                ('shower_days', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Jours de douche')),
                ('hair_wash_days', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Lavage cheveux')),
                ('bed_manager', models.CharField(blank=True, choices=[('AUTNM', 'Autonomous'), ('FML', 'Family'), ('NTWRK', 'Network')], default=None, max_length=5, null=True, verbose_name='Le lit est à faire par')),
                ('bed_sheets_manager', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Changement des draps')),
                ('laundry_manager', models.CharField(blank=True, choices=[('AUTNM', 'Autonomous'), ('FML', 'Family'), ('NTWRK', 'Network')], default=None, max_length=5, null=True, verbose_name='Linge est à faire par')),
                ('laundry_drop_location', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Le linge sale est à déposer où ?')),
                ('new_laundry_location', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Les vêtements/serviettes etc. se trouvent où ?')),
                ('weight', models.PositiveSmallIntegerField(default=None, verbose_name='Poids')),
                ('size', models.PositiveSmallIntegerField(default=None, verbose_name='Taille en cm.')),
                ('nutrition_autonomy', models.CharField(blank=True, choices=[('AUTNM', 'Autonomous'), ('FML', 'Family'), ('NTWRK', 'Network'), ('TB', 'Tube')], default=None, max_length=5, null=True, verbose_name='Sonde PEG')),
                ('diet', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Régime')),
                ('meal_on_wheels', models.BooleanField(blank=True, default=None, null=True, verbose_name='Repas sur roues')),
                ('shopping_management', models.CharField(blank=True, choices=[('AUTNM', 'Autonomous'), ('FML', 'Family'), ('NTWRK', 'Network')], default=None, max_length=5, null=True, verbose_name='Commissions à faire par')),
                ('shopping_management_desc', models.TextField(blank=True, default=None, max_length=250, null=True, verbose_name='Description')),
                ('urinary_incontinence', models.BooleanField(blank=True, default=None, null=True, verbose_name='Incontinence urinaire')),
                ('faecal_incontinence', models.BooleanField(blank=True, default=None, null=True, verbose_name='Incontinence fécale')),
                ('protection', models.BooleanField(blank=True, default=None, null=True, verbose_name='Protection')),
                ('day_protection', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Protection Pendant la journée')),
                ('night_protection', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Protection Pendant la nuit')),
                ('protection_ordered', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Protection à commander par')),
                ('urinary_catheter', models.BooleanField(blank=True, default=None, null=True, verbose_name='Sonde urinaire')),
                ('crystofix_catheter', models.BooleanField(blank=True, default=None, null=True, verbose_name='Crystofix')),
                ('elimination_addnl_details', models.TextField(blank=True, default=None, max_length=500, null=True, verbose_name='Autres détails ou remarques')),
                ('day_care_center', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Foyer de jour')),
                ('day_care_center_activities', models.TextField(blank=True, default=None, max_length=500, null=True, verbose_name='Activités')),
                ('household_chores', models.BooleanField(blank=True, default=None, null=True, verbose_name='Tâches domestiques')),
                ('patient', models.ForeignKey(limit_choices_to={'is_under_dependence_insurance': True}, on_delete=django.db.models.deletion.PROTECT, related_name='dep_anamnesis_to_patient', to='invoices.patient')),
            ],
            options={
                'verbose_name': 'Anamnèse Patient',
                'verbose_name_plural': 'Anamnèses Patient',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='TensionAndTemperatureParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('params_date_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='Date')),
                ('systolic_blood_press', models.PositiveSmallIntegerField(default=0, verbose_name='Tension max.')),
                ('diastolic_blood_press', models.PositiveSmallIntegerField(default=0, verbose_name='Tension min.')),
                ('heart_pulse', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Pouls')),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=3, null=True, verbose_name='Température')),
                ('stools_parameter', models.BooleanField(default=False, verbose_name='Selles')),
                ('vas', models.PositiveSmallIntegerField(blank=True, choices=[(0, '0 (aucune douleur)'), (1, '1 (simple inconfort)'), (2, '2 (simple inconfort+)'), (3, '3 (douleur légère)'), (4, '4 (douleur légère+)'), (5, '5 (douleur modérée)'), (6, '6 (douleur modérée+)'), (7, '7 (douleur intense)'), (8, '8 (douleur intense+)'), (9, '9 (douleur intolérable)'), (10, '10 (douleur intolérable+)')], default=None, null=True, verbose_name='EVA')),
                ('weight', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=4, null=True, verbose_name='Poids (KG)')),
                ('oximeter_saturation', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Saturation O2 %')),
                ('general_remarks', models.TextField(blank=True, default=None, max_length=200, null=True, verbose_name='Remarques générales')),
                ('blood_glucose', models.DecimalField(blank=True, decimal_places=1, default=None, max_digits=4, null=True, verbose_name='Mesure de la glycémie')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('monthly_params', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='health_params_to_monthly_params', to='dependence.monthlyparameters')),
                ('user', invoices.db.fields.CurrentUserField(default=invoices.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Paramètre',
                'verbose_name_plural': 'Paramètres',
                'ordering': ['params_date_time'],
            },
        ),
        migrations.CreateModel(
            name='SocialHabits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('habit_type', models.CharField(blank=True, choices=[('FML', 'Famille'), ('FRND', 'Amis'), ('IMP', 'Personnes importantes')], default=None, max_length=4, null=True, verbose_name='Type')),
                ('habit_description', models.TextField(blank=True, default=None, help_text='Veuillez décrire les habitudes sociales', max_length=200, null=True, verbose_name='Description')),
                ('biography', models.ForeignKey(blank=True, default=None, help_text='Veuillez saisir les habitudes du bénéficiaire', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='social_habit_patient_biography', to='dependence.patientanamnesis')),
            ],
            options={
                'verbose_name': 'Habitude Sociale',
                'verbose_name_plural': 'Habitudes Sociales',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='SharedMedicalCareSummaryPerPatientDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_care', models.IntegerField(verbose_name='Fréquence')),
                ('periodicity', models.CharField(choices=[('D', 'Daily'), ('W', 'Weekly'), ('M', 'Monthly'), ('A', 'Annually')], max_length=15, verbose_name='Périodicité')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_medical_care_summary_per_patient_detail_item', to='dependence.longtermcareitem')),
                ('medical_care_summary_per_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_medical_care_summary_per_patient_detail', to='dependence.medicalcaresummaryperpatient')),
            ],
            options={
                'verbose_name': 'Prestation Aidant',
                'verbose_name_plural': 'Prestations Aidant',
            },
        ),
        migrations.CreateModel(
            name='OtherStakeholder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_name', models.CharField(max_length=50, verbose_name='Nom et prénom')),
                ('contact_pro_spec', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='Spécialité')),
                ('contact_private_phone_nbr', models.CharField(max_length=30, verbose_name='Tél. privé')),
                ('contact_business_phone_nbr', models.CharField(blank=True, default=None, max_length=30, null=True, verbose_name='Tél. bureau')),
                ('contact_email', models.EmailField(blank=True, default=None, max_length=30, null=True, verbose_name='Email')),
                ('stakeholder_anamnesis', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dep_stakeholder_to_anamnesis', to='dependence.patientanamnesis')),
            ],
            options={
                'verbose_name': 'Autre intervenant',
                'verbose_name_plural': 'Autres intervenants',
            },
        ),
        migrations.CreateModel(
            name='MedicalCareSummaryPerPatientDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_care', models.IntegerField(verbose_name='Fréquence')),
                ('periodicity', models.CharField(choices=[('D', 'Daily'), ('W', 'Weekly'), ('M', 'Monthly'), ('A', 'Annually')], max_length=15, verbose_name='Périodicité')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_care_summary_per_patient_detail_item', to='dependence.longtermcareitem')),
                ('medical_care_summary_per_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_care_summary_per_patient_detail', to='dependence.medicalcaresummaryperpatient')),
            ],
            options={
                'verbose_name': 'Prestation Prestataire',
                'verbose_name_plural': 'Prestations Prestataire',
            },
        ),
        migrations.CreateModel(
            name='LongTermPackagePrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_validity_package', to='dependence.longtermpackage')),
            ],
            options={
                'verbose_name': 'Prix assurance dépendance',
                'verbose_name_plural': 'Prix assurance dépendance',
                'ordering': ['package'],
            },
        ),
        migrations.CreateModel(
            name='LongTermMonthlyActivityFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(verbose_name='Year')),
                ('month', models.PositiveIntegerField(verbose_name='Month')),
                ('provider_date_of_sending', models.DateField(verbose_name='Provider Date of Sending')),
                ('force_creation', models.BooleanField(default=False, verbose_name='Force Creation')),
                ('file', models.FileField(blank=True, null=True, upload_to=dependence.activity.long_term_care_activity_declaration_file_path, verbose_name='File')),
                ('version_number', models.PositiveIntegerField(verbose_name='Version Number')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('monthly_activities', models.ManyToManyField(blank=True, help_text='Please first save year and month to be able to add activities', to='dependence.longtermmonthlyactivity', verbose_name='Activities')),
            ],
            options={
                'verbose_name': "Fichier d'activité mensuel",
                'verbose_name_plural': "Fichiers d'activité mensuels",
            },
        ),
        migrations.CreateModel(
            name='LongTermMonthlyActivityDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_date', models.DateField(verbose_name='Activity Date')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Quantity')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_dtl_to_item', to='dependence.longtermcareitem')),
                ('long_term_monthly_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_details', to='dependence.longtermmonthlyactivity')),
            ],
            options={
                'verbose_name': "Détail du relevé d'activité mensuel",
                'verbose_name_plural': "Détails des relevés d'activité mensuels",
                'ordering': ['activity_date'],
            },
        ),
        migrations.CreateModel(
            name='LongTermCareMonthlyStatementSending',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('xml_invoice_file', models.FileField(blank=True, null=True, upload_to=dependence.invoicing.long_term_care_monthly_statement_file_path_bis, verbose_name='Generated Invoice File')),
                ('date_of_sending_xml_file', models.DateField(blank=True, null=True, verbose_name="Date d'envoi du fichier")),
                ('received_invoice_file_response', models.FileField(blank=True, null=True, upload_to=dependence.invoicing.long_term_care_monthly_statement_response_file_path_bis, verbose_name='Received Invoice Response File')),
                ('scan_of_signed_invoice', models.FileField(blank=True, null=True, upload_to='long_term_invoices/signed/', verbose_name='Scan of Signed Invoice')),
                ('date_of_receipt_of_response_file', models.DateField(blank=True, null=True, verbose_name='Date de réception du fichier de retour')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('link_to_monthly_statement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='monthly_statement_xml_file', to='dependence.longtermcaremonthlystatement')),
            ],
        ),
        migrations.CreateModel(
            name='LongTermCareInvoiceLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_period', models.DateField(verbose_name='Date Début période')),
                ('end_period', models.DateField(blank=True, null=True, verbose_name='Date Fin période')),
                ('paid', models.BooleanField(default=False, verbose_name='Paid')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoice_line', to='dependence.longtermcareinvoicefile')),
                ('long_term_care_package', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='long_term_care_package', to='dependence.longtermpackage')),
            ],
            options={
                'verbose_name': 'Ligne de facture assurance dépendance',
                'verbose_name_plural': 'Lignes de facture assurance dépendance',
            },
        ),
        migrations.CreateModel(
            name='LongTermCareInvoiceItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('care_date', models.DateField(verbose_name='Date Début période')),
                ('quantity', models.IntegerField(default=1, verbose_name='Quantité')),
                ('paid', models.BooleanField(default=False, verbose_name='Paid')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoice_item', to='dependence.longtermcareinvoicefile')),
                ('long_term_care_package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_item_to_long_term_care_package', to='dependence.longtermpackage')),
            ],
            options={
                'verbose_name': 'Item facture assurance dépendance',
                'verbose_name_plural': 'Item de facture assurance dépendance',
            },
        ),
        migrations.AddField(
            model_name='longtermcareinvoicefile',
            name='link_to_monthly_statement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='monthly_statement', to='dependence.longtermcaremonthlystatement'),
        ),
        migrations.AddField(
            model_name='longtermcareinvoicefile',
            name='patient',
            field=models.ForeignKey(limit_choices_to=models.Q(('is_under_dependence_insurance', True)), on_delete=django.db.models.deletion.CASCADE, related_name='patient', to='invoices.patient'),
        ),
        migrations.CreateModel(
            name='LongTermCareActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_date', models.DateField(verbose_name='Item Date')),
                ('status', models.CharField(choices=[('DONE', 'Done'), ('NOT_DONE', 'Not Done'), ('CANCELLED', 'Cancelled')], default='DONE', max_length=100, verbose_name='Status')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('assigned_employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_employee', to='invoices.employee')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoice', to='dependence.longtermcareinvoicefile')),
                ('long_term_care_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='long_term_care_item', to='dependence.longtermcareitem')),
            ],
            options={
                'verbose_name': "Ligne d'activité assurance dépendance",
                'verbose_name_plural': "Lignes d'activités assurance dépendance",
                'ordering': ['item_date'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_message', models.TextField()),
                ('error_message_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dependence.longtermcareinvoicefile')),
                ('statement_sending', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dependence.longtermcaremonthlystatementsending')),
            ],
        ),
        migrations.CreateModel(
            name='FallDeclarationReportPicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, default='', help_text='Please, give a description of the uploaded image.', max_length=250, null=True, verbose_name='Description')),
                ('image', models.ImageField(help_text='Please, upload a picture.', upload_to='fall_declaration_report_pictures/', verbose_name='Image')),
                ('fall', models.ForeignKey(help_text='Here, you can upload pictures if needed', on_delete=django.db.models.deletion.CASCADE, related_name='fall_declaration_report_pictures', to='dependence.falldeclaration')),
            ],
            options={
                'verbose_name': 'Image attachée au rapport',
                'verbose_name_plural': 'Images attachées au rapport',
            },
        ),
        migrations.CreateModel(
            name='DependenceInsurance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_date', models.DateField(default=None, verbose_name='Date évaluation')),
                ('ack_receipt_date', models.DateField(blank=True, default=None, null=True, verbose_name='Accusè de réception')),
                ('decision_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date de la décision')),
                ('rate_granted', models.CharField(blank=True, choices=[('REF', 'Refused'), ('ZRO', '0'), ('ONE', '1'), ('TWO', '2'), ('TRE', '3'), ('FOR', '4'), ('FVE', '5'), ('SIX', '6'), ('SVN', '7'), ('EGT', '8'), ('NIN', '9'), ('TEN', '10'), ('ELV', '11'), ('TWV', '12')], default=None, max_length=3, null=True, verbose_name='Forfait')),
                ('dep_anamnesis', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dep_dep_ins_to_anamnesis', to='dependence.patientanamnesis')),
            ],
            options={
                'verbose_name': 'Décision Assurance dépendance',
                'verbose_name_plural': 'Décisions Assurance dépendance',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='DeclarationDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_of_count', models.IntegerField(verbose_name='Year of count')),
                ('month_of_count', models.IntegerField(verbose_name='Month of count')),
                ('change_type', models.CharField(choices=[('ENTRY', 'Entry'), ('EXIT', 'Exit'), ('CORRECTION', 'Correction')], max_length=10, verbose_name='Change type')),
                ('change_reference', models.CharField(help_text='Le prestataire est libre de choisir son système de référencement des déclarations', max_length=50, verbose_name='Change reference')),
                ('change_organism_identifier', models.CharField(blank=True, help_text='Correspond à la référence donnée à la déclaration par l’organisme gestionnaire. Celui-ci sera renseigné dans le fichier retour. Ce champ doit obligatoirement être renseigné lors d’une déclaration de correction.', max_length=50, null=True, verbose_name='Change organism identifier')),
                ('change_date', models.DateField(default=django.utils.timezone.now, help_text='Date d’entrée ou de sortie indiquant le jour, le mois et l’année.', verbose_name='Change date')),
                ('information', models.TextField(help_text='Ce champ est optionnel et peut contenir du texte libre.', max_length=50, verbose_name='Information')),
                ('change_anomaly', models.TextField(blank=True, help_text='Ce champ est optionnel et peut contenir du texte libre.', max_length=80, null=True, verbose_name='Change anomaly')),
                ('link_to_chg_dec_file', models.ForeignKey(help_text='Link to the file containing the declaration of change', on_delete=django.db.models.deletion.CASCADE, related_name='longtermcaredeclaration_to_chg_dec_file', to='dependence.changedeclarationfile')),
                ('patient', models.ForeignKey(help_text='Only looks for patients covered by long-term care insurance, check that the checkbox is validated if you cannot find your patient', limit_choices_to={'is_under_dependence_insurance': True}, on_delete=django.db.models.deletion.CASCADE, related_name='declaration_dtl_to_patient', to='invoices.patient')),
            ],
            options={
                'verbose_name': 'Déclarations assurance dépendance',
                'verbose_name_plural': 'Déclarations assurance dépendance',
            },
        ),
        migrations.CreateModel(
            name='ContactPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Priorité')),
                ('contact_name', models.CharField(max_length=50, verbose_name='Nom')),
                ('contact_relationship', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='Relation')),
                ('contact_private_phone_nbr', models.CharField(max_length=30, verbose_name='Tél. privé')),
                ('contact_business_phone_nbr', models.CharField(blank=True, default=None, max_length=30, null=True, verbose_name='Tél. bureau')),
                ('patient_anamnesis', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dep_contactpers_to_anamnesis', to='dependence.patientanamnesis')),
            ],
            options={
                'verbose_name': 'Personne de contact',
                'verbose_name_plural': 'Personnes de contact',
            },
        ),
        migrations.CreateModel(
            name='CarePlanMaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_number', models.PositiveSmallIntegerField(verbose_name='Num.')),
                ('replace_plan_number', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Remplce Num.')),
                ('plan_start_date', models.DateField(default=django.utils.timezone.now, help_text="Date du début d'application du plan des soins", verbose_name='À partir de:')),
                ('plan_end_date', models.DateField(blank=True, default=None, help_text="Date de la fin d'application du plan des soins", null=True, verbose_name="Jusqu'à:")),
                ('plan_decision_date', models.DateField(blank=True, help_text="Date de la décision de l'assurance dépendance", null=True, verbose_name='Date décision:')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('last_valid_plan', models.BooleanField(default=False, verbose_name='Dernier plan valide')),
                ('medical_care_summary_per_patient', models.ForeignKey(blank=True, help_text='Lien vers Résumé des soins médicaux par patient reçu de la CNS', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='care_plan_to_medical_care_summary_per_patient', to='dependence.medicalcaresummaryperpatient')),
                ('patient', models.ForeignKey(help_text="Ne recheche que les patients pris en charge par l'assurance dépendance, vérifiez que la checkbox est validé si vous ne trouvez pas votre patient", limit_choices_to={'is_under_dependence_insurance': True}, on_delete=django.db.models.deletion.CASCADE, related_name='care_plan_to_patient', to='invoices.patient')),
                ('user', invoices.db.fields.CurrentUserField(default=invoices.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Plan de Soins Détaillé',
                'verbose_name_plural': 'Plans de Soins Détaillé',
                'ordering': ['patient__id'],
            },
        ),
        migrations.CreateModel(
            name='CarePlanDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nom')),
                ('time_start', models.TimeField(verbose_name='De')),
                ('time_end', models.TimeField(verbose_name='A')),
                ('care_actions', models.TextField(max_length=500, verbose_name='Actions à prévoir')),
                ('care_plan_to_master', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='care_plan_detail_to_master', to='dependence.careplanmaster')),
                ('long_term_care_items', models.ManyToManyField(blank=True, related_name='care_plan_detail_to_long_term_care_item', to='dependence.longtermcareitem', verbose_name='Prestations Assurance dépendance')),
                ('params_occurrence', models.ManyToManyField(related_name='from_careplan_detail_to_occurence+', to='dependence.careoccurrence', verbose_name='Occurence')),
            ],
            options={
                'verbose_name': 'Détail',
                'verbose_name_plural': 'Détails',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='BiographyHabits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('habit_type', models.CharField(blank=True, choices=[('MORNING', 'Levé'), ('SLEEP', 'Coucher'), ('BRK_FST', 'Petit Déjeuner'), ('LNCH', 'Déjeuner'), ('DNR', 'Diner')], default=None, max_length=7, null=True, verbose_name='Type')),
                ('habit_time', models.TimeField(verbose_name='Heure')),
                ('habit_ritual', models.CharField(max_length=50, verbose_name='Rite')),
                ('habit_preferences', models.CharField(max_length=50, verbose_name='Préférences')),
                ('biography', models.ForeignKey(blank=True, default=None, help_text='Veuillez saisir les habitudes du bénéficiaire', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='dep_habit_patient_biography', to='dependence.patientanamnesis')),
            ],
            options={
                'verbose_name': 'Habitudes',
                'verbose_name_plural': 'Habitudes',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='AssignedPhysician',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anamnesis', models.ForeignKey(blank=True, default=None, help_text='Please enter hospitalization dates of the patient', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dep_patient_anamnesis', to='dependence.patientanamnesis')),
                ('assigned_physician', models.ForeignKey(blank=True, default=None, help_text='Please enter physician of the patient', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dep_assigned_physicians', to='invoices.physician', verbose_name='Médecin')),
            ],
            options={
                'verbose_name': 'Médecin Traitant',
                'verbose_name_plural': 'Médecins Traitants',
            },
        ),
        migrations.CreateModel(
            name='ActivityHabits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('habit_type', models.CharField(blank=True, choices=[('WASH', 'Se soigner'), ('DRESS', 'Habillements'), ('OCCUP', 'Occupations'), ('DSRS', 'Souhaits')], default=None, max_length=5, null=True, verbose_name='Type')),
                ('habit_description', models.TextField(blank=True, default=None, help_text='Veuillez décrire les habitudes en fonction du type', max_length=200, null=True, verbose_name='Description')),
                ('biography', models.ForeignKey(blank=True, default=None, help_text='Veuillez saisir les habitudes du bénéficiaire', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='activity_habit_patient_biography', to='dependence.patientanamnesis')),
            ],
            options={
                'verbose_name': "Habitude d'Activités",
                'verbose_name_plural': "Habitudes d'Activités",
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='AAITransmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transmission_number', models.PositiveSmallIntegerField(verbose_name='Numéro')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Date création')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('patient', models.ForeignKey(help_text="Ne recheche que les patients pris en charge par l'assurance dépendance, vérifiez que la checkbox est validé si vous ne trouvez pas votre patient", limit_choices_to={'is_under_dependence_insurance': True}, on_delete=django.db.models.deletion.CASCADE, related_name='aai_to_patient', to='invoices.patient')),
                ('user', invoices.db.fields.CurrentUserField(default=invoices.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
            ],
            options={
                'verbose_name': 'Transmission AAI',
                'verbose_name_plural': 'Transmissions AAI',
                'ordering': ['patient__id'],
            },
        ),
        migrations.CreateModel(
            name='AAITransDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objectives', models.TextField(help_text='Prise en charge, lien avec AEV', max_length=100, verbose_name='Objectifs')),
                ('means', models.TextField(blank=True, default=None, max_length=100, null=True, verbose_name='Moyens/Actions')),
                ('date_time_means_set', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Date/h')),
                ('results', models.TextField(blank=True, default=None, max_length=100, null=True, verbose_name='Résultats')),
                ('date_time_results_set', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Date/h')),
                ('detail_to_aai_master', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='from_aai_detail_to_master', to='dependence.aaitransmission', verbose_name='Détails')),
                ('means_paraph', models.ForeignKey(blank=True, default=None, limit_choices_to=models.Q(('abbreviation__in', ['XXX']), _negated=True), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='employee_of_means', to='invoices.employee', verbose_name='Paraphe')),
                ('results_paraph', models.ForeignKey(blank=True, default=None, limit_choices_to=models.Q(('abbreviation__in', ['XXX']), _negated=True), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='employee_of_results', to='invoices.employee', verbose_name='Paraphe')),
            ],
            options={
                'verbose_name': 'Détail',
                'verbose_name_plural': 'Détails',
                'ordering': ['date_time_means_set'],
            },
        ),
        migrations.AddConstraint(
            model_name='longtermpackageprice',
            constraint=models.UniqueConstraint(fields=('package', 'start_date'), name='unique package price'),
        ),
        migrations.AlterUniqueTogether(
            name='longtermmonthlyactivity',
            unique_together={('year', 'month', 'patient')},
        ),
        migrations.AlterUniqueTogether(
            name='declarationdetail',
            unique_together={('patient', 'change_reference')},
        ),
    ]
